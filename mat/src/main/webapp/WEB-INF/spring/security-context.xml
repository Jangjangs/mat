<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
<bean id="customAccessDenied" class ="com.google.security.CustomAccessDeniedHandler"></bean>
<!--스프링 빈으로 등록-->
<!-- <bean id="customLoginSuccess" class="com.google.security.CustomLoginSuccessHandler"></bean> -->

<!-- <bean id="customPasswordEncoder" class="com.google.security.CustomNoOpPasswordEncoder"></bean> -->
<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

<bean id="customUserDetailService" class="com.google.security.CustomUserDetailService"></bean>

	<security:http>
		
		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
		<!-- <security:form-login/> -->
		<!--접근이 거부됐을 때 보일 화면을 지정-->
		<!-- <security:access-denied-handler error-page="/accessError"/> -->
		
		<!--위에 등록한 빈을 추가-->
		<security:access-denied-handler ref="customAccessDenied"/>
		<!--위에 등록한 빈을 여기에 주입-->
		<security:form-login login-page="/customLogin"/>
		
		<!--invalidate-session 을 true로 지정하면 
		말그대로 로그아웃 했을때 세션을 무효화 시킨다.-->
		<security:logout logout-url="/customLogout" invalidate-session="true" logout-success-url="/" delete-cookies="remember-me, JSESSIONID"/>
		
		<!-- 일주일간 토큰 유지 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
	</security:http>
	
	<!-- 스프링 시큐리티 동작하기위해 필요한 존재 -->
	<security:authentication-manager>
		<!-- 실제처리는 UserDetailsSerivce를 이용해 처리 하는데 아래는 단순한 로그인을 위한 지정 -->
        <security:authentication-provider user-service-ref="customUserDetailService">
        
<!--             <security:user-service>
               <security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
                
            </security:user-service> -->
        	<!--  dataSource빈이 등록돼있어야 함 -->
        	<!-- <security:jdbc-user-service data-source-ref="dataSource"
        	users-by-username-query="select userid, userpw, enabled from tbl_member where userid = ?" 
                authorities-by-username-query="select userid, auth from tbl_member_auth where userid = ?"/>
            <security:password-encoder ref="bcryptPasswordEncoder"/> -->
        	
        	<!-- <security:password-encoder ref="customPasswordEncoder"/> -->
        	
        	
        	<security:password-encoder ref="bcryptPasswordEncoder"/>
        	
        </security:authentication-provider>
    
	</security:authentication-manager>

</beans>
